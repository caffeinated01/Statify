import { useContext, useState } from "react";
import LoginContext from "../LoginContext";
import Select from "react-select";
import LinkIcon from "./LinkIcon";
import { TIME_RANGE_OPTIONS, SELECT_STYLES } from "../utils/constants";
import { useSpotifyData } from "../hooks/useSpotifyData";
import { makeSpotifyAPIPost, buildTrackURIs } from "../utils/spotifyUtils";

function Tracks() {
  const { userInfo, token } = useContext(LoginContext);
  const { tracks, setTracksTimeRangeAndFetch } = useSpotifyData(token);
  const [timeRange, setTimeRange] = useState(TIME_RANGE_OPTIONS[0]);
  const [playlistJSON, setPlaylistJSON] = useState({});
  const [isGenerated, setIsGenerated] = useState(false);

  function handleTimeRangeChange(selected) {
    setTimeRange(selected);
    setTracksTimeRangeAndFetch(selected.value);
    setIsGenerated(false); // Reset playlist generation state when time range changes
  }

  async function generatePlaylist() {
    if (!token || !userInfo?.id || tracks.length === 0) return;

    try {
      const date = new Date();
      const day = String(date.getDate()).padStart(2, "0");
      const month = String(date.getMonth() + 1).padStart(2, "0");
      const year = String(date.getFullYear()).slice(2);

      const playlistData = {
        name: `${userInfo.display_name}'s Top Tracks, ${day}/${month}/${year}`,
        description: `A playlist generated by Statify (https://statify-app.vercel.app), based on ${
          userInfo.display_name
        }'s top tracks in the past ${timeRange.label.toLowerCase()}. Happy jamming!`,
        public: true,
      };

      // Create playlist
      const playlistUrl = `https://api.spotify.com/v1/users/${userInfo.id}/playlists`;
      const playlist = await makeSpotifyAPIPost(
        playlistUrl,
        token,
        playlistData
      );
      setPlaylistJSON(playlist);

      // Add tracks to playlist
      const trackURIs = buildTrackURIs(tracks);
      const addTracksUrl = `https://api.spotify.com/v1/playlists/${playlist.id}/tracks`;
      const tracksData = {
        uris: trackURIs.split(","),
        position: 0,
      };

      await makeSpotifyAPIPost(addTracksUrl, token, tracksData);
      setIsGenerated(true);
    } catch (error) {
      console.error("Failed to generate playlist:", error);
    }
  }

  return (
    <>
      <div className="flex flex-col items-center justify-center gap-10 py-10">
        <h1 className="text-2xl">Top Tracks, {timeRange.label}</h1>
        <div className="flex flex-col items-center justify-center gap-5">
          <Select
            onChange={handleTimeRangeChange}
            options={TIME_RANGE_OPTIONS}
            placeholder={"Select time range"}
            styles={SELECT_STYLES}
            value={timeRange}
          />
          {!isGenerated ? (
            <button
              className="rounded-md bg-green-600 px-5 py-1 font-extralight text-white hover:bg-green-700 duration-100 ease-in"
              onClick={generatePlaylist}
              disabled={tracks.length === 0}
            >
              Generate playlist
            </button>
          ) : (
            <a
              href={playlistJSON.external_urls?.spotify}
              target="_blank"
              rel="noreferrer"
            >
              <button className="rounded-md bg-sky-600 px-5 py-1 font-extralight text-white hover:bg-sky-700 duration-100 ease-in">
                View playlist
              </button>
            </a>
          )}
        </div>
        <div className="flex flex-col">
          {tracks.map((track, index) => (
            <div
              key={track.id || index}
              className=" bg-bg-secondary relative mx-5 flex items-center justify-between border-[1px] border-b-0 border-[#ffffff1a] px-5 py-5 first:rounded-t-md last:rounded-b-md last:border-b-[1px]"
            >
              <div className="flex items-center justify-center gap-2">
                <h1 className="text-2xl">{index + 1}.</h1>
                <img
                  className="h-[15vh] w-[15vw] object-scale-down"
                  src={track.album?.images?.[0]?.url}
                  alt={`${track.name} album cover`}
                />
                <div className="flex-col">
                  <div className="flex gap-2">
                    <h1 className="text-xl">
                      {track.name.length > 24
                        ? track.name.substring(0, 24) + "..."
                        : track.name}
                    </h1>
                  </div>
                  <div>
                    {track.artists?.map((artist, artistIndex) => (
                      <div key={artist.id || artistIndex}>{artist.name}</div>
                    ))}
                  </div>
                </div>
              </div>
              <LinkIcon link={track.external_urls?.spotify} />
            </div>
          ))}
        </div>
      </div>
    </>
  );
}
export default Tracks;
